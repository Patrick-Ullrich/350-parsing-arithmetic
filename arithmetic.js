// Declaring some static
var ADD_OP = "+",
    SUB_OP = "-",
    MULT_OP = "*",
    DIV_OP = "/",
    LEFT_PAREN = "(",
    RIGHT_PAREN = ")",
    IDENT = "",
    INT_LIT = "";

var EXAMPLE_EXPRESSION = "(sum + 47) / total";


function log(message) {
  //document.getElementById("output").innerHTML += message + "<br>";
  console.log(message);
}
/* expr
  Parses strings in the language generated by the rule:
  <expr> -> <term> {( + | -) <term> }
*/
function expr() {
  log("Enter <expr>");
  
  /* parse the first term */
  term();
  
  /* As long as the next token is + or -, get the next token
     and parse the next term */
  while(nextToken == ADD_OP || nextToken == SUB_OP) {
    lex();
    term();
  }
  
  log("Exit <expr>");
} /* End of function expr */

/*  term
    Parses string in the language generated by the rule:
    <term> -> <factor> {(* | /) <factor>}
*/
function term() {
  log("Enter <term>");
  
  /* Parse the first factor */
  factor();
  
  /* As long as the next token is + or /, get the next token
     and parse the next factor */
  while(nextToken == MULT_OP || nextToken == DIV_OP) {
    lex();
    factor();
  }
  
  log("Exit <term>");
} /* End of function term */

/* factor
   Parses strings in the language generated by the rule:
   <factor> -> id | int_constant ( < expr> )
*/
function factor() {
  log("Enter <factor");
  
  /* Determine which RHS */
  if(nextToken == IDENT || nextToken == INT_LIT) {
    /* Get the next token */
    lex();
    
    /* If the RHS is ( <expr> ), call lex to pass over the left parenthesis,
       call expr, and check for the right parenthesis */
  } else if(nextToken == LEFT_PAREN) {
      lex();
      expr();
    
      if(nextToken == RIGHT_PAREN) {
        lex();
      } else {
        log("ERROR");
      }/* End of if(nextToken == ... */
    
  } else {
    log("ERROR");
  } /* End of else */
  
  log("Exit <factor>");
} /* End of function factor */